(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'Category'"
p3
sS'layer'
p4
S'/home/jigar/web2py/applications/app1/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    response.flash = "Welcome to web2py!"\n    return dict(message=T(\'Hello World\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n@auth.requires_login()\ndef lall():\n\tflag=0\n\tca=db(db.Category.id>0).select()\n\tx=db(db.Post.id>0).select()\n\ty=db(db.Post.User==db.auth_user.id).select(db.auth_user.first_name)\n\tz=db(db.auth_user.id==db.Votes.User).select()\n#\tresponse.flash= "Like karne ke liye dhanyavaad _^_!"\n\tif (len(request.args)!=0):\n\t\tr=request.args[0]\n\t\tp=request.args[1]\n#\tprint x\n#\t\tresponse.flash= "Like karne ke liye dhanyavaad _^_!"\n\t\tif (request.args[1]=="like" ):\t\n\t\t\tb=db(db.Post.id==(int(r)+1)).select()\n#\t\t\tprint db(db.Post.User_liked.contains(auth.user.id)).select()\n\t\t\trec=db(db.Post.User_liked.contains(auth.user.id)).select()\n\t\t\tif  (len(rec)):\n\t\t\t\tprint rec[0][\'id\']\n\t\t\t\tprint r\n\t\t\t\tfor j in range (len(rec)):\n\t\t\t\t\tif (rec[j][\'id\']==int(r)+1):\n\t\t\t\t\t\tflag=1\n\t\t\t\tif (flag==1):\n\t\t\t\t\tredirect(URL("lall"))\n\t\t\t\t\tresponse.flash= "Kitni baar like karega!!"\n\t\t\t\t\t\n\t\t\t\telse:\t\t\t\n\t\t\t\t\tresponse.flash= "Like karne ke liye dhanyavaad _^_!"\n\t\t\t\t\ta=db(db.Post.id==(int(r)+1)).update(Rating=b[0][\'Rating\']+5)\t\n#\t\t\t\t\tdb.Post.User_liked.append(auth.user.id)\t\t\t\t\t\n#\t\t\t\tdb(db.Post.id==(int(r)+1)).update(User_liked=auth.user.id)\n\t\t\t\t\tredirect(URL("lall"))\n\t\t\telse:\n\t\t\t\tresponse.flash= "Like karne ke liye dhanyavaad _^_!"\n\t\t\t\ta=db(db.Post.id==(int(r)+1)).update(Rating=b[0][\'Rating\']+5)\t\n#\t\t\t\tdb.Post.User_liked.append(auth.user.id)\t\t\t\t\t\n#\t\t\t\tdb(db.Post.id==(int(r)+1)).update(User_liked=auth.user.id)\t\n\t\t\t\tredirect(URL("lall"))\n\t\telif (request.args[1]=="dislike"):\t\n\t\t\tb=db(db.Post.id==int(r)+1).select(db.Post.Rating)\n\t\t\ta=db(db.Post.id==int(r)+1).update(Rating=b[0][\'Rating\']-3)\n#\t\t\tredirect(URL("lall"))\n\treturn locals()\n\n@auth.requires_login()\ndef postnews():\n\tform=SQLFORM(db.Post)\n\tif form.process().accepted:\n\t\tresponse.flash= \'News Posted!\'\n\treturn locals()\n\n@auth.requires_login()\ndef listcat():\n\tp=db(db.Post.id>0).select()\n\tq=db(db.Post.User==db.auth_user.id).select(db.auth_user.first_name)\n\ty=request.args[0]\n\tx=db(db.Post.Category==y).select()\n\tif (len(x)>0):\n\t\treturn locals()\t\n\telse :\n\t\treturn locals()\n@auth.requires_login()\ndef addcomment():\n\tr=request.args[0]\n\tr=int(r)+1\n\tform=SQLFORM(db.Comment)\n\tform.vars.Post_no=r\n#\tform.vars.Post_no.writable=False\n\tif form.process().accepted :\n\t\tresponse.flash= \'Comment Recorded\'\n\t\tredirect(URL(\'showcomments\', args=(r-1)))\n\treturn locals()\n\n@auth.requires_login()\ndef showcomments():\n\tr=request.args[0]\n\tr=int(r)+1\n\ta=db(db.Comment.Post_no==r).select()\n\tb=db((db.Comment.Post_no==r) & (db.auth_user.id==db.Comment.By_user)).select(db.auth_user.first_name)\n\treturn locals()\n\n@auth.requires_login()\ndef deletepost():\n\tif (len(request.args)!=0):\n\t\tr=request.args[0]\n\t\tp=request.args[1]\n\t\tr=int(r)\n\t\trec=db(db.Post.id==r).select(db.Post.User)\n\t\tprint r\n\t\tprint auth.user.id\n\t\tprint rec[0][\'User\']\n\t\tif (auth.user.id==rec[0][\'User\'] or auth.user.Member_type==\'Admin\'):\n\t\t\tdb(db.Post.id==r).delete()\n\t\t\tredirect(URL(p))\n\t\telse:\n\t\t\tresponse.flash=\'You cannot delete others\\\' post\'\n\t\t\tredirect(URL(p))\n\treturn locals()\n\n@auth.requires_login()\ndef delaccount():\n\tif (auth.user.Member_type!=\'Admin\'):\n\t\tresponse.flash=\'You cant do this! :(\'\n\t\tredirect(URL(\'lall\'))\n\telse:\n\t\tacc=db(db.auth_user.Member_type==\'User\').select()\n\treturn locals()\n\n@auth.requires_login()\ndef d():\n\tif (auth.user.Member_type!=\'Admin\'):\n\t\tresponse.flash=\'You cant do this! :(\'\n\t\tredirect(URL(\'lall\'))\n\telse :\n\t\tr=request.args[0]\n\t\tdb(r==db.auth_user.id).delete()\n\t\tredirect(URL(\'delaccount\'))\n\treturn locals()\n\n@auth.requires_login()\ndef addcat():\n\tif (auth.user.Member_type==\'User\'):\n\t\tresponse.flash= \'Only the Admin can add categories\'\n\telse :\n\t\tform=SQLFORM(db.cat)\n\t\tif form.process().accepted :\n\t\t\tresponse.flash= \'Category registered!\'\n\treturn locals()\n\n@auth.requires_login()\ndef updatepost():\n\treturn locals\n\n\n\nresponse._vars=response._caller(lall)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/usr/lib/pymodules/python2.7/gluon/restricted.py", line 204, in restricted\n    exec ccode in environment\n  File "/home/jigar/web2py/applications/app1/controllers/default.py", line 208, in <module>\n  File "/usr/lib/pymodules/python2.7/gluon/globals.py", line 172, in <lambda>\n    self._caller = lambda f: f()\n  File "/usr/lib/pymodules/python2.7/gluon/tools.py", line 2533, in f\n    return action(*a, **b)\n  File "/home/jigar/web2py/applications/app1/controllers/default.py", line 75, in lall\n    ca=db(db.Category.id>0).select()\n  File "/usr/lib/pymodules/python2.7/gluon/dal.py", line 5119, in __getattr__\n    return self[key]\n  File "/usr/lib/pymodules/python2.7/gluon/dal.py", line 5113, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'Category\'\n'
p11
s.